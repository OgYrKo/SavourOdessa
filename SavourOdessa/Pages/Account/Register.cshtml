@page
@model RegisterModel
<div class="d-flex align-items-center justify-content-center" style="min-height: 80vh;">
    <div>
        <div class="text-center text-white p-2" style="background-color:#CAE2E0"><h4>Registration</h4></div>
        <div class="m-1 text-danger" asp-validation-summary="ModelOnly"></div>
        <form method="post">
            <input type="hidden" name="returnUrl" value="@Model.ReturnUrl" />
            <div class="form-group">
                <label>UserName</label>
                <input class="form-control" asp-for="UserName" />
                <span asp-validation-for="UserName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Password</label>
                <input asp-for="Password" type="password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <button class="btn btn-primary mt-2 form-control" type="submit" style="background-color:#CAE2E0;border-color:black;">Register</button>
        </form>
    </div>

</div>

@functions {
    [CustomAuthorize("Guest")]
    public class RegisterModel : PageModel
    {
        private readonly IConfiguration _configuration;
        private readonly DataContext _context;
        public RegisterModel(IConfiguration configuration, DataContext context)
        {
            _configuration = configuration;
            _context = context;
        }
        [BindProperty]
        public string UserName { get; set; } = string.Empty;
        [BindProperty]
        public string Password { get; set; } = string.Empty;
        [BindProperty(SupportsGet = true)]
        public string? ReturnUrl { get; set; }
        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                try
                {
                    await _context.Database.ExecuteSqlRawAsync($"CALL create_new_client('{UserName}', '{Password}');");
                    var response = _context.Users.Where(value => value.Username == UserName).Select(value => DataContext.get_group_name(value.Username)).ToList();
                    string role = response[0];
                    if (role != "guest")
                    {
                        HttpContext httpContext = Request.HttpContext;
                        httpContext.Session.SetString("Username", UserName);
                        httpContext.Session.SetString("Password", Password);
                        httpContext.Session.SetString("Role", role);
                        await httpContext.Session.CommitAsync();

                        return Redirect(ReturnUrl ?? "/");
                    }
                    ModelState.AddModelError("", "You are logged in as a guest");

                }
                catch (PostgresException e)
                {
                    if (e.SqlState == "42710")
                    {
                        ModelState.AddModelError("UserName", "This username is already taken");
                    }
                    else
                    {
                        ModelState.AddModelError("", e.Message);
                    }
                }
                catch
                {
                    ModelState.AddModelError("", "Something go wrong");
                }
            }
            return Page();
        }

    }
}