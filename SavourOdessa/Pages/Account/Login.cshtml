@page
@model LoginModel
<div class="d-flex align-items-center justify-content-center" style="min-height: 80vh;">
    <div>
        <div class="text-center text-white p-2" style="background-color:#CAE2E0"><h4>Log In</h4></div>
        <div class="m-1 text-danger" asp-validation-summary="All"></div>
        <form method="post">
            <input type="hidden" name="returnUrl" value="@Model.ReturnUrl" />
            <div class="form-group">
                <label>UserName</label>
                <input class="form-control" asp-for="UserName" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <input asp-for="Password" type="password" class="form-control" />
            </div>
            <button class="btn btn-primary mt-2 form-control" type="submit" style="background-color:#CAE2E0;border-color:black;">Log In</button>
        </form>
        <hr />
        <div class="text-center">
            <p>I’m new here</p>
            <a href="/Account/Register">
                 <button class="btn btn-primary mt-2 form-control" style="background-color:#CAE2E0;border-color:black;">Register</button>
            </a>
        </div>
    </div>
    
</div>

@functions {
    [CustomAuthorize("Guest")]
    public class LoginModel : PageModel
    {
        private readonly IConfiguration _configuration;
        private readonly IDataContextFactory _contextFactory;
        public LoginModel(IConfiguration configuration, IDataContextFactory contextFactory)
        {
            _configuration = configuration;
            _contextFactory = contextFactory;
        }
        [BindProperty]
        public string UserName { get; set; } = string.Empty;
        [BindProperty]
        public string Password { get; set; } = string.Empty;
        [BindProperty(SupportsGet = true)]
        public string? ReturnUrl { get; set; }
        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                try
                {
                    var context = _contextFactory.CreateDbContext(UserName, Password);
                    var response = context.Users.Where(value => value.Username == UserName).Select(value => DataContext.get_group_name(value.Username)).ToList();
                    string role = response[0];
                    if (role != "guest")
                    {
                        HttpContext httpContext = Request.HttpContext;
                        httpContext.Session.SetString("Username", UserName);
                        httpContext.Session.SetString("Password", Password);
                        httpContext.Session.SetString("Role", role);
                        await httpContext.Session.CommitAsync();

                        return Redirect(ReturnUrl ?? "/");
                    }
                    ModelState.AddModelError("", "You are logged in as a guest");

                }
                catch
                {
                    ModelState.AddModelError("", "Invalid username or password");
                }
            }
            return Page();
        }

    }
}