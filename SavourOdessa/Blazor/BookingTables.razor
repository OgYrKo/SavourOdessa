@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@if (SelectedTableIndex == -1)
{
    <h3>Select a table</h3>
    <div style="width:100vw;height:50vh;border:1px solid grey;">
        <table width="100%" height="100%">
            @for (int i = 0; i < TablesCountByY; i++)
            {
                <tr>
                    @for (int j = 0; j < TablesCountByX; j++)
                    {
                        int localI = i; // Локальная переменная для захвата значения i
                        int localJ = j; // Локальная переменная для захвата значения j
                        <td style="text-align: center;">
                            <button class="group-btn btn"
                                    style="border-color:#90D1CB;color:#90D1CB"
                                    @onclick="@(() => SelectedTableIndex = TablesId[localJ, localI])">
                                <p>Table #@Tables[TablesId[localJ, localI]].Tableid</p>
                                <p>Sits count: @Tables[TablesId[localJ, localI]].Sitscount</p>
                            </button>
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
}
else if (SelectedTableIndex != -1 && SelectedTimeIndex == -1)
{
    <h3>Select time</h3>
    <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind="@SelectedDate" />
    <div class="row">
        @for (int i = 0; i < AvailableTime.Count; i++)
        {
            var (time, available) = AvailableTime[i];
            int localI = i;
            <div class="col">
                <button class="btn btn-outline-primary mb-2"
                        @onclick="@(() => SelectedTimeIndex = localI)"
                        disabled="@(!available)"
                        style="border-color:#90D1CB;color:#90D1CB">
                    @time.ToString("HH:mm")
                </button>
            </div>
        }
    </div>
    <button @onclick="@(() => SelectedTableIndex = -1)">Go back</button>
}
else if (IsBooked==true)
{
    <h3>Table booked successfully</h3>
    <button @onclick="@ReloadPage">Book another table</button>
}
else if(IsBooked==false)
{
    <h3>Something went wrong</h3>
    <button @onclick="@ReloadPage">Try again</button>
}
else
{
    <h3>Is everything correct?</h3>
    <p>Book table #@Tables[SelectedTableIndex].Tableid for @Tables[SelectedTableIndex].Sitscount persons on @AvailableTime[SelectedTimeIndex].Item1.ToString("d") at @AvailableTime[SelectedTimeIndex].Item1.ToString("t")</p>

    <button @onclick="@BookTable">Book</button>
    <button @onclick="@(() => SelectedTimeIndex = -1)">Go back</button>
}

@code {
    [Inject]
    public DataContext? Context { get; set; }
    public bool? IsBooked { get; set; } = null;
    [Parameter]
    public int RestaurantId { get; set; }

    public Restauranttable[]? Tables;
    public double TablesCountByX { get; set; } = 1;
    public double TablesCountByY { get; set; } = 1;
    public int[,] TablesId = new int[,] { };
    private int _selectedTableIndex = -1;
    public int SelectedTableIndex
    {
        get => _selectedTableIndex;
        set
        {
            _selectedTableIndex = value;
            if (value != -1)
                UpdateAvailableTime();
        }
    }
    public DateTime _selectedDate = DateTime.Now;
    public DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            _selectedDate = value;
            UpdateAvailableTime();
        }
    }
    public int SelectedTimeIndex = -1;
    List<(DateTime, bool)> AvailableTime = new();

    protected override void OnInitialized()
    {
        Tables = Context?.Restauranttables.Where(t => t.Restaurantid == RestaurantId).ToArray() ?? new Restauranttable[] { };
        for (int i = 0; i < Tables.Length; i++)
        {
            TablesCountByX = Math.Max(TablesCountByX, Tables[i].Tablelocation.X);
            TablesCountByY = Math.Max(TablesCountByY, Tables[i].Tablelocation.Y);
        }
        TablesId = new int[(int)TablesCountByX, (int)TablesCountByY];
        for (int i = 0; i < Tables.Length; i++)
        {
            TablesId[(int)(Tables[i].Tablelocation.X - 1), (int)(Tables[i].Tablelocation.Y - 1)] = i;
        }
    }

    public void UpdateAvailableTime()
    {
        int tableId = Tables[SelectedTableIndex].Tableid;
        DateTime date = SelectedDate.Date;
        var (start, end) = GetOpeningHours(date);
        Tablereservation[] tableReservations = Context?.Tablereservations.Where(r => r.Reservationtime.Date == date.Date && r.Tableid == tableId).ToArray() ?? new Tablereservation[] { };

        List<(DateTime, bool)> result = new List<(DateTime, bool)>();
        end = end.AddHours(-1.5);
        for (DateTime i = start; i < end; i = i.AddMinutes(15))
        {
            if (i < DateTime.Now)
            {
                result.Add((i, false));
            }
            else if (tableReservations.Any(r => r.Reservationtime <= i && i < r.Reservationtime + r.Duration))
            {
                result.Add((i, false));
            }
            else
                result.Add((i, true));
        }
        AvailableTime = result;
    }

    public void BookTable()
    {
        try
        {

            Tablereservation r = new Tablereservation
                {
                    Tableid = Tables[SelectedTableIndex].Tableid,
                    Reservationtime = AvailableTime[SelectedTimeIndex].Item1,
                    Duration = TimeSpan.FromHours(1),
                    Userid = Context?.Systemusers.First().Userid ?? 1
                };
            Context!.Tablereservations.Add(r);
            Context.SaveChanges();
            IsBooked = true;
        }
        catch
        {
            IsBooked = false;
        }
    }


    private void ReloadPage() => NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    //TODO: create a stored procedure for this
    private (DateTime Start, DateTime End) GetOpeningHours(DateTime date)
    {
        DateTime start = date.AddHours(6);
        DateTime end = date.AddDays(1).AddHours(-1);
        return (start, end);
    }
}
