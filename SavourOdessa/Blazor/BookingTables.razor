@inject IJSRuntime JSRuntime
<h3>Book a table</h3>
<div style="width:100vw;height:50vh;border:1px solid grey;">
    <table width="100%" height="100%">
        @for (int i = 0; i < TablesCountByY; i++)
        {
            <tr>
                @for (int j = 0; j < TablesCountByX; j++)
                {
                    <td style="text-align: center;">
                        <button class="group-btn btn" 
                                style="border-color:#90D1CB;color:#90D1CB"
                                @onclick="@(() => SelectedTableId = TablesId[j, i])">
                            <p>Table #@Tables[TablesId[j, i]].Tableid</p>
                            <p>Sits count: @Tables[TablesId[j, i]].Sitscount</p>
                        </button>
                    </td>
                }
            </tr>
        }
    </table>
</div>

<div>
    <select name="tables" @bind="SelectedTableId">
        <option disabled selected value="-1">Select table</option>
        @foreach (Restauranttable table in Tables ?? new Restauranttable[] { })
        {
            <option value="@table.Tableid">
                @table.Tableid
            </option>
        }
    </select>
</div>



@if (SelectedTableId != -1)
{
    <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" value="@SelectedDate" @onchange="UpdateAvailableTime" />
    <div class="row">
        @foreach (var (time, available) in AvailableTime)
        {
            <div class="col">
                <button class="btn btn-outline-primary mb-2" disabled="@(!available)" style="border-color:#90D1CB;color:#90D1CB">@time.ToString("HH:mm")</button>
            </div>
        }
    </div>
}

<script>
    // Функция для выбора кнопки
    function selectButton(selectedButton) {
        // Получаем все кнопки в группе
        var buttons = document.getElementsByClassName("group-btn");

        // Снимаем выделение со всех кнопок
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove("selected");
        }

        // Выделяем выбранную кнопку
        buttons[selectedButton - 1].classList.add("selected");
    }
</script>

<style>
    /* Стили для выделенной кнопки */
    .selected {
        background-color: #FFF8F8; 
    }
</style>


@code {
    [Inject]
    public DataContext? Context { get; set; }

    [Parameter]
    public int RestaurantId { get; set; }

    public Restauranttable[]? Tables;
    public double TablesCountByX { get; set; } = 1;
    public double TablesCountByY { get; set; } = 1;
    public int[,] TablesId = new int[,] { };
    private int _selectedTableId = -1;
    public int SelectedTableId
    {
        get => _selectedTableId;
        set
        {
            _selectedTableId = value;
            JSRuntime.InvokeVoidAsync("selectButton", Tables[value].Tableid);
            UpdateAvailableTime();
        }
    }
    public string SelectedDate = DateTime.Now.ToString("yyyy-MM-dd");
    IEnumerable<(DateTime, bool)> AvailableTime = new (DateTime, bool)[] { };

    protected override void OnInitialized()
    {
        Tables = Context?.Restauranttables.Where(t => t.Restaurantid == RestaurantId).ToArray() ?? new Restauranttable[] { };
        for (int i = 0; i < Tables.Length; i++)
        {
            TablesCountByX = Math.Max(TablesCountByX, Tables[i].Tablelocation.X);
            TablesCountByY = Math.Max(TablesCountByY, Tables[i].Tablelocation.Y);
        }
        TablesId = new int[(int)TablesCountByX, (int)TablesCountByY];
        for (int i = 0; i < Tables.Length; i++)
        {
            TablesId[(int)(Tables[i].Tablelocation.X - 1), (int)(Tables[i].Tablelocation.Y - 1)] = i;
        }
    }

    public void UpdateAvailableTime()
    {
        int tableId = SelectedTableId;
        DateTime date = DateTime.Parse(SelectedDate);
        var (start, end) = GetOpeningHours(date);
        Tablereservation[] tableReservations = Context?.Tablereservations.Where(r => r.Reservationtime.Date == date.Date && r.Tableid == tableId).ToArray() ?? new Tablereservation[] { };

        List<(DateTime, bool)> result = new List<(DateTime, bool)>();
        end = end.AddHours(-1.5);
        for (DateTime i = start; i < end; i = i.AddMinutes(15))
        {
            if (i < DateTime.Now)
            {
                result.Add((i, false));
            }
            else if (tableReservations.Any(r => r.Reservationtime <= i && i < r.Reservationtime + r.Duration))
            {
                result.Add((i, false));
            }
            else
                result.Add((i, true));
        }
        AvailableTime = result;
    }

    //TODO: create a stored procedure for this
    private (DateTime Start, DateTime End) GetOpeningHours(DateTime date)
    {
        DateTime start = date.AddHours(6);
        DateTime end = date.AddDays(1).AddHours(-1);
        return (start, end);
    }
}
